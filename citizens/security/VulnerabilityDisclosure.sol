// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface VulnerabilityDisclosure {
    /**
     * @dev Emitted when a new vulnerability report is submitted.
     * @param reportId The unique ID of the report.
     * @param reporter The address that submitted the report.
     * @param severity The reported severity of the vulnerability.
     * @param timestamp The time of submission.
     */
    event VulnerabilityReported(bytes32 indexed reportId, address indexed reporter, uint256 severity, uint256 timestamp);

    /**
     * @dev Emitted when a vulnerability report's status is updated.
     * @param reportId The unique ID of the report.
     * @param newStatus The new status (e.g., "received", "under_review", "fixed").
     */
    event ReportStatusUpdated(bytes32 indexed reportId, string newStatus);

    /**
     * @dev Emitted when a bounty is paid for a disclosed vulnerability.
     * @param reportId The unique ID of the report.
     * @param recipient The address that received the bounty.
     * @param amount The amount of bounty paid.
     */
    event BountyPaid(bytes32 indexed reportId, address indexed recipient, uint256 amount);

    // Errors

    /**
     * @dev Thrown when an unauthorized address attempts to perform a restricted operation.
     */
    error UnauthorizedAccess();

    /**
     * @dev Thrown when a required parameter is missing or invalid.
     */
    error InvalidParameter(string parameterName, string description);

    /**
     * @dev Thrown when a report with the given ID does not exist.
     */
    error ReportNotFound(bytes32 reportId);

    /**
     * @dev Submits a new vulnerability report.
     * @param descriptionHash A hash of the detailed vulnerability description (stored off-chain).
     * @param severity The reported severity level (e.g., 1 for low, 5 for critical).
     * @return reportId The unique ID generated for this report.
     */
    function submitVulnerabilityReport(bytes32 descriptionHash, uint256 severity) external returns (bytes32 reportId);

    /**
     * @dev Updates the status of a submitted vulnerability report.
     * @param reportId The unique ID of the report.
     * @param newStatus The new status (e.g., "under_review", "confirmed", "fixed", "rejected").
     */
    function updateReportStatus(bytes32 reportId, string calldata newStatus) external;

    /**
     * @dev Pays out a bounty to the reporter of a confirmed vulnerability.
     * @param reportId The unique ID of the report.
     * @param recipient The address to send the bounty to.
     * @param amount The amount of tokens to pay as bounty.
     */
    function payBounty(bytes32 reportId, address recipient, uint256 amount) external;

    /**
     * @dev Retrieves the details of a vulnerability report.
     * @param reportId The unique ID of the report.
     * @return reporter The address that submitted the report.
     * @return descriptionHash The hash of the description.
     * @return severity The reported severity.
     * @return status The current status of the report.
     */
    function getReportDetails(bytes32 reportId) external view returns (address reporter, bytes32 descriptionHash, uint256 severity, string memory status);
}